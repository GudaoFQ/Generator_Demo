<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <!-- todo 修改：配置参数位置 -->
    <properties resource="generator/generatorConfig.properties"/>

    <!-- 配置table表信息内容体，targetRuntime指定采用MyBatis3的版本 -->
    <context id="tables" targetRuntime="MyBatis3Simple">
        <!-- 生成的 Java 文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化 Java 代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化 XML 代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <!-- 生成的pojo，将implements Serializable：为模型生成序列化方法 -->
        <plugin type="org.mybatis.generator.plugins.SerializablePlugin"/>
        <!-- 生成实体添加toString方法 -->
        <!--<plugin type="org.mybatis.generator.plugins.ToStringPlugin"/>-->
        <!--生成mapper.xml时覆盖原文件-->
        <plugin type="org.mybatis.generator.plugins.UnmergeableXmlMappersPlugin" />
        <!-- todo 修改：集成lombok，将type修改为自定义的lombok配置实体位置 -->
        <plugin type="com.gudao.generator.generatorconfig.comment.LombokPlugin">
            <!-- 配置lombok中需要的jar包 -->
            <property name="lombokDataAnnotationPackage" value="lombok.Data" />
            <property name="lombokToStringAnnotationPackage" value="lombok.ToString" />
        </plugin>

        <!-- todo 修改：抑制生成注释，由于生成的注释都是英文的，可以不让它生成，将type修改为自己定义的注释配置实体位置；不需要按照自己的配置信息生成实体字段注解就将type="com.wedding.project.configuration.generator.comment.MySQLCommentGenerator"删除 -->
        <commentGenerator type="com.gudao.generator.generatorconfig.comment.MySQLCommentGenerator">
            <!-- suppressAllComments:阻止生成注释，默认为false -->
            <property name="suppressAllComments" value="false"/>
            <!-- suppressDate:阻止生成的注释包含时间戳，默认为false -->
            <property name="suppressDate" value="true"/>
            <!-- 生成创建人 -->
            <property name="Author" value="Programmer"/>
            <!-- 生成创建日期 -->
            <property name="DateFormat" value="yyyy/MM/dd"/>
        </commentGenerator>

        <!-- 配置数据库连接信息 -->
        <jdbcConnection driverClass="${jdbc.driver}"
                        connectionURL="${jdbc.url}"
                        userId="${jdbc.username}"
                        password="${jdbc.password}">
            <!-- 防止xml中生成重复sql语句 -->
            <property name="nullCatalogMeansCurrent" value="true"/>
            <!-- 防止thint转换为boolean类型 -->
            <property name="tinyInt1isBit" value="false"/>
        </jdbcConnection>

        <!--
            默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer
            true，把JDBC DECIMAL 和 NUMERIC 类型解析为java.math.BigDecimal
        -->
        <javaTypeResolver>
            <property name="forceBigDecimals" value="false"/>
        </javaTypeResolver>

        <!-- todo 修改：生成model类，targetPackage指定model类的包名， targetProject指定生成的model放在项目的哪个工程下面【分布式中会把实体类放在common模块下，这样就要修改targetProject】 -->
        <javaModelGenerator targetPackage="${entity.targetPackage}" targetProject="src/main/java">
            <property name="enableSubPackages" value="false" />
            <property name="trimStrings" value="false" />
        </javaModelGenerator>

        <!-- todo 修改：生成MyBatis的Mapper.xml文件，targetPackage指定mapper.xml文件的包名， targetProject指定生成的mapper.xml放在项目的哪个工程下面 -->
        <sqlMapGenerator targetPackage="${xml.targetPackage}" targetProject="src/main/resources">
            <property name="enableSubPackages" value="false" />
        </sqlMapGenerator>

        <!-- todo 修改：生成MyBatis的Mapper接口类文件,targetPackage指定Mapper接口类的包名， targetProject指定生成的Mapper接口xml放在项目的哪个工程下面 -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="${dao.targetPackage}" targetProject="src/main/java">
            <property name="enableSubPackages" value="false" />
        </javaClientGenerator>

        <!-- todo 修改：下面的enable...注释调就会产生一个example类，可以做sql修改 -->
        <table tableName="${table.tableName}"
               domainObjectName="${table.domainObjectName}"
               mapperName="${table.domainObjectName}Mapper"
               enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">
            <!--
                uuid使用配置：select uuid() from dual
                手动自增配置：SELECT LAST_INSERT_ID()
                若主键是自动生成的，那么使用以下配置；否则注释掉以下配置
            -->
            <!--<generatedKey column="${table.idColumn}" sqlStatement="SELECT LAST_INSERT_ID()"/>-->
            <!-- 将指定字段中的thint类型映射为Integer类型 -->
            <!--<columnOverride column="status" javaType="Integer"/>-->
        </table>
    </context>
</generatorConfiguration>